Index: test_git/Photo_be_ready.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nfrom datetime import datetime\r\nfrom PIL import Image\r\nfrom PIL.ExifTags import TAGS\r\ndef day_night_clssify(dt):\r\n    if 6 <= dt.month <= 8 and 5 <= dt.hour <= 11:\r\n        print('summer morning')\r\n    elif 3 <= dt.month <= 5 and 5 <= dt.hour <= 11:\r\n        print('spring morning')\r\ndef print_files_in_dir(root_dir):\r\n    dates=[]\r\n    folder = os.listdir(root_dir)\r\n    for file in folder:\r\n        image_path = os.path.join(root_dir, file)\r\n        try:\r\n            img = Image.open(image_path)\r\n            img_info = img._getexif()\r\n            img.close()\r\n            for tag_id, value in img_info.items():\r\n                tag = TAGS.get(tag_id, tag_id)\r\n                if tag == 'DateTime':\r\n                    dt = datetime.strptime(value, '%Y:%m:%d %H:%M:%S')\r\n                    day_night_clssify(dt)\r\n        except:\r\n            # 이미지 파일이 아니거나 EXIF 정보를 읽을 수 없는 경우를 대비\r\n            print(f\"{file}는 처리할 수 없습니다.\")\r\n    return dates\r\n\r\n\r\n\r\ndates = print_files_in_dir(\"C:\\\\Users\\\\mirun\\\\PycharmProjects\\\\PhotoTimestamp-AI\\\\for_vision\\\\test_my_photo\")\r\nfor date in dates:\r\n    print(day_night_clssify(date))\r\n\r\n# def month_hour_extract(value):\r\n#     try:\r\n#         date_part, time_part = value.split(' ')\r\n#         month = int(date_part.split(':')[1])\r\n#         hour = int(time_part.split(':')[0])\r\n#         minute = int(time_part.split(':')[1])\r\n#         return month, hour, minute\r\n#     except Exception as e:\r\n#         print(f\"Error: {e}\")\r\n#         return None\r\n\r\nfrom datetime import datetime\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/test_git/Photo_be_ready.py b/test_git/Photo_be_ready.py
--- a/test_git/Photo_be_ready.py	
+++ b/test_git/Photo_be_ready.py	
@@ -3,10 +3,40 @@
 from PIL import Image
 from PIL.ExifTags import TAGS
 def day_night_clssify(dt):
-    if 6 <= dt.month <= 8 and 5 <= dt.hour <= 11:
-        print('summer morning')
-    elif 3 <= dt.month <= 5 and 5 <= dt.hour <= 11:
-        print('spring morning')
+    if dt.month in [3, 4, 5]:
+        if (dt.hour == 5 and dt.minute >= 34) or (5 < dt.hour < 12) or (dt.hour == 12 and dt.minute <= 33):
+            print("It's Spring Morning!")
+        elif (dt.hour == 12 and dt.minute >= 34) or (12 < dt.hour < 19) or (dt.hour == 19 and dt.minute <= 35):
+            print("It's Spring Afternoon!")
+        else:
+            print("It's Spring Night!")
+
+    elif dt.month in [6, 7, 8]:
+        if (dt.hour == 4 and dt.minute >= 58) or (4 < dt.hour < 12) or (dt.hour == 12 and dt.minute <= 34):
+            print("It's Summer Morning!")
+        elif (dt.hour == 12 and dt.minute >= 34) or (12 < dt.hour < 20) or (dt.hour == 20 and dt.minute <= 9):
+            print("It's Summer Afternoon!")
+        else:
+            print("It's Summer Night!")
+
+
+    elif dt.month in [9, 10, 11]:
+        if (dt.hour == 6 and dt.minute >= 18) or (6 < dt.hour < 12) or (dt.hour == 12 and dt.minute <= 23):
+            print("It's Autumn Morning!")
+        elif (dt.hour == 12 and dt.minute >= 23) or (12 < dt.hour < 18) or (dt.hour == 18 and dt.minute <= 26):
+            print("It's Autumn Afternoon!")
+        else:
+            print("It's Autumn Night!")
+
+
+    elif dt.month in [1, 2, 12]:
+        if (dt.hour == 7 and dt.minute >= 5) or (7 < dt.hour < 12) or (dt.hour == 12 and dt.minute <= 37):
+            print("It's Winter Morning!")
+        elif (dt.hour == 12 and dt.minute >= 37) or (12 < dt.hour < 18) or (dt.hour == 18 and dt.minute <= 10):
+            print("It's Winter Afternoon!")
+        else:
+            print("It's Winter Night!")
+
 def print_files_in_dir(root_dir):
     dates=[]
     folder = os.listdir(root_dir)
@@ -20,7 +50,9 @@
                 tag = TAGS.get(tag_id, tag_id)
                 if tag == 'DateTime':
                     dt = datetime.strptime(value, '%Y:%m:%d %H:%M:%S')
+                    print(file)
                     day_night_clssify(dt)
+
         except:
             # 이미지 파일이 아니거나 EXIF 정보를 읽을 수 없는 경우를 대비
             print(f"{file}는 처리할 수 없습니다.")
@@ -30,7 +62,7 @@
 
 dates = print_files_in_dir("C:\\Users\\mirun\\PycharmProjects\\PhotoTimestamp-AI\\for_vision\\test_my_photo")
 for date in dates:
-    print(day_night_clssify(date))
+    print(date, day_night_clssify(date))
 
 # def month_hour_extract(value):
 #     try:

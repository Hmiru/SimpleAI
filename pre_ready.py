# -*- coding: utf-8 -*-
"""pre_ready.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xo_zlXGLurpLLVAHxHiOilhDnHyIj_zO
"""

import tensorflow as tf
normalization_layer = tf.keras.layers.Normalization()

class PreProcessing():
  def __init__(self, image_height, image_width, validation_split, batch_size, seed=118):

      self.image_height = image_height
      self.image_width = image_width
      self.validation_split = validation_split
      self.batch_size = batch_size
      self.seed = seed
      self.train_ds = None
      self.valid_ds = None
      self.test_ds = None

  def get_ds(self,dir):
    subsets=["training","validation"]
    datasets=[]
    for subset in subsets:
      dataset=tf.keras.preprocessing.image_dataset_from_directory(
        dir,
        image_size=(self.image_height, self.image_width),
        validation_split=self.validation_split,
        subset=subset,
        seed=188,
        batch_size=self.batch_size,
        label_mode='categorical'
      )
      datasets.append(dataset)

    self.train_ds, self.valid_ds = datasets
    valid_batches = tf.data.experimental.cardinality(self.valid_ds)
    self.test_ds = self.valid_ds.take((2*valid_batches) // 3)#Test set : 20%
    self.valid_ds = self.valid_ds.skip((2*valid_batches) // 3)#Valid set : 10%
    return self

  def normalize(self):
    for images, _ in self.train_ds:
      normalization_layer.adapt(images)

    self.train_ds = self.train_ds.map(lambda x, y: (normalization_layer(x), y))
    self.valid_ds = self.valid_ds.map(lambda x, y: (normalization_layer(x), y))
    self.test_ds = self.test_ds.map(lambda x, y: (normalization_layer(x), y))
    return self

  def shuffle(self):
    self.train_ds = self.train_ds.shuffle(buffer_size=1000).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
    self.valid_ds = self.valid_ds.shuffle(buffer_size=1000).prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
    self.test_ds = self.test_ds.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
    return self

